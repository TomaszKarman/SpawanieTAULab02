package tomaszkarman.com.dao;

import tomaszkarman.com.domain.SpawarkaCTR;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

public class SpawarkaDaoImpl implements SpawarkaDao {

    private Connection connection;
    private PreparedStatement addSpawarkaStmt;
    private PreparedStatement getAllSpawarkiStmt;
    private PreparedStatement getSpawarkaById;
    private PreparedStatement updateDateSpawarka;
    private PreparedStatement getTimeFromSpawarka;
    private PreparedStatement takeLastRecord;

    public SpawarkaDaoImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady())
            createTables();
        setConnection(connection);
    }

    public SpawarkaDaoImpl() {
    }

    public void createTables() throws SQLException {
        connection.createStatement().executeUpdate(
                "CREATE TABLE "
                        + "Spawarka(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                        + "name varchar(20) NOT NULL, "
                        + "model varchar(20) NOT NULL, "
                        + "kod int NOT NULL, "
                        + "createTime TIMESTAMP, "
                        + "readTime TIMESTAMP, "
                        + "modifyTime TIMESTAMP)");
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Spawarka".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    @Override
    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addSpawarkaStmt = connection.prepareStatement("INSERT INTO Spawarka (name, model, kod, createTime) VALUES (?, ?, ?, now())");

    }

    @Override
    public SpawarkaCTR findSpawarkaById(int id) throws SQLException {
        SpawarkaCTR spawarkaCTR = new SpawarkaCTR();
//        updateDateInSql(id, 1);
        getSpawarkaById = connection.prepareStatement("SELECT * FROM Spawarka WHERE id = " + id);

        try {
            ResultSet rs = getSpawarkaById.executeQuery();
            updateDateInSql(id, 1);
            while (rs.next()) {
                spawarkaCTR.setId(rs.getInt("id"));
                spawarkaCTR.setName(rs.getString("name"));
                spawarkaCTR.setModel(rs.getString("model"));
                spawarkaCTR.setKod(rs.getInt("kod"));
                spawarkaCTR.setCreateTime(rs.getDate("createTime"));
                spawarkaCTR.setReadTime(this.currentDate());
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return spawarkaCTR;
    }


    @Override
    public void updateDateInSql(int spawarkaId, int typeUpdate) throws SQLException {

        switch (typeUpdate) {
            //przy odczycie z bazy danych
            case 1:
                updateDateSpawarka = connection.prepareStatement("UPDATE Spawarka SET readTime = now() WHERE id = " + spawarkaId);
                updateDateSpawarka.executeQuery();
                break;

            //przy edycji rekordu
            case 2:
                updateDateSpawarka = connection.prepareStatement("UPDATE Spawarka SET modifyTime = now() WHERE id = " + spawarkaId);
                updateDateSpawarka.executeQuery();
                break;
        }
    }

    @Override
    public Date checkDateInDatabase(SpawarkaCTR spawarkaCTR, int dateVariant) throws SQLException {

        Date date = new Date();
        switch (dateVariant) {
            //pobierz date kreacji obiektu
            case 1: {
                getTimeFromSpawarka = connection.prepareStatement("SELECT createTime FROM Spawarka WHERE id = " + spawarkaCTR.getId());
                ResultSet rs = getTimeFromSpawarka.executeQuery();
                date = rs.getDate("creationDate");
                break;
            }
            //pobierz date ostatniego pobrania obiektu
            case 2: {
                getTimeFromSpawarka = connection.prepareStatement("SELECT readTime FROM Spawarka WHERE id = " + spawarkaCTR.getId());
                ResultSet rs = getTimeFromSpawarka.executeQuery();
                date = rs.getDate("readTime");
                break;
            }
            //pobierz date ostatniej edycji obiektu
            case 3: {
                getTimeFromSpawarka = connection.prepareStatement("SELECT modifyTime FROM Spawarka WHERE id = " + spawarkaCTR.getId());
                ResultSet rs = getTimeFromSpawarka.executeQuery();
                date = rs.getDate("modifyTime");
                break;
            }
        }
        return date;
    }

    @Override
    public Date currentDate() {
        return new Date();
    }

    @Override
    public int addSpawarka(SpawarkaCTR spawarkaCTR) {
        int count = 0;
        try {
            addSpawarkaStmt.setString(1, spawarkaCTR.getName());
            addSpawarkaStmt.setString(2, spawarkaCTR.getModel());
            addSpawarkaStmt.setInt(3, spawarkaCTR.getKod());
            count = addSpawarkaStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    @Override
    public int updateNameOfSpawarka(int idSpawarki, String nameToUpdate) throws SQLException {
        int count = 0;
        try {
            updateDateSpawarka = connection.prepareStatement("UPDATE Spawarka SET name = " + nameToUpdate + " WHERE id = " + idSpawarki);
            updateDateSpawarka.executeQuery();
            updateDateInSql(idSpawarki, 2);
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return 0;
    }

    @Override
    public List<SpawarkaCTR> getAllSpawarki() {
        List<SpawarkaCTR> spawarkaCTRList = new LinkedList<>();
        try {
            getAllSpawarkiStmt = connection.prepareStatement("SELECT * FROM Spawarka");
            ResultSet rs = getAllSpawarkiStmt.executeQuery();

            while (rs.next()) {
                SpawarkaCTR spawarkaCTR = new SpawarkaCTR();
                spawarkaCTR.setId(rs.getInt("id"));
                spawarkaCTR.setName(rs.getString("name"));
                spawarkaCTR.setModel(rs.getString("model"));
                spawarkaCTR.setKod(rs.getInt("kod"));
                spawarkaCTRList.add(spawarkaCTR);
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return spawarkaCTRList;
    }
}
